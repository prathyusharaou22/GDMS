package cts.gdms.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import cts.gdms.connection.ConnectionManager;
import cts.gdms.constants.SQLConstants;
import cts.gdms.exception.CustomerException;

import cts.gdms.util.*;
import cts.gdms.vo.CustomerRegVO;
import cts.gdms.vo.LoginVO;

public class CustomerRegDAO {
	private transient Connection dbConnection;
	private transient PreparedStatement preparedStatement;
	private transient ResultSet rset;
	private transient Statement statement;
	private transient final List<String> emailList = new ArrayList<String>();
	public static final Logger LOG = Logger.getLogger(CustomerRegDAO.class);
	public String insertCustomerDetails(final CustomerRegVO cvo) throws CustomerException {
		String message = "";
		System.out.println("came to customer DAO");
		final String sql = SQLUtill.getSqlProperty(SQLConstants.INSERT);
		System.out.println(sql);
		final String sql1 = SQLUtill.getSqlProperty(SQLConstants.INSERT1);
		System.out.println(sql1);
		final String custName = autoGenerate(cvo.getFirstName());
		System.out.println(custName);
		try {
			dbConnection = ConnectionManager.getConnection();
			System.out.println( cvo.getEmailId()+"-"+ cvo.getPassWord());
			preparedStatement = dbConnection.prepareStatement(sql1);
			preparedStatement.setString(1, cvo.getEmailId());
			preparedStatement.setString(2, cvo.getPassWord());
			preparedStatement.setString(3, cvo.getRetypepassWord());
			preparedStatement.setString(4, cvo.getLoginType());
			System.out.println("entered");
			
			final int status1 = preparedStatement.executeUpdate();
			System.out.println("statue---"+status1);
			if (status1 == 1) {
				preparedStatement = dbConnection.prepareStatement(sql);
				preparedStatement.setString(1, custName);
				preparedStatement.setString(2, cvo.getFirstName());
				preparedStatement.setString(3, cvo.getLastName());
				preparedStatement.setString(4, cvo.getDateOfBirth());
				preparedStatement.setString(5, cvo.getAddress());
				preparedStatement.setString(6, cvo.getEmailId());
				preparedStatement.setString(7, cvo.getContactNo());
				preparedStatement.setString(8, cvo.getGender());
				final int status = preparedStatement.executeUpdate();
				if (status == 1) {
					message = "succes" + " " + custName;
					// dbConnection.commit();
				} else {
					message = "fail";
					dbConnection.rollback();
				}
			}
		} catch (Exception e) {
			throw new CustomerException("Connection not established during inserting data", e);
			
			// TODO Auto-generated catch block
			
		}finally{
			try {
				dbConnection.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				throw new CustomerException("Connection not closed after inserting data",e);
			}
		}
		LOG.info("customer details inserted");
		return message;
	}

	private String autoGenerate(final String custName) throws CustomerException {
		final StringBuffer custid = new StringBuffer();
		System.out.println("custid--"+custid);
		dbConnection = ConnectionManager.getConnection();
		try {
			final String generate = SQLUtill.getSqlProperty(SQLConstants.GENERATE);
			
			System.out.println(generate+"------");
			custid.append('C');
			custid.append(custName.substring(0, 2).toUpperCase());
			statement = dbConnection.createStatement();
			rset = statement.executeQuery(generate);
			int currentCustomerCount = 0;
			while (rset.next()) {
				currentCustomerCount = rset.getInt(1);
				System.out.println("rset.getInt(1)--"+rset.getInt(1));
				custid.append(rset.getInt(1));
			}
			int status = statement.executeUpdate("update auto_customer1 set id = "+(currentCustomerCount+1));
			System.out.println("status--"+status);
		} catch (Exception e) {
			throw new CustomerException(" autogeneration failed",e);
		} finally {
			try {
				dbConnection.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				throw new CustomerException("Connection not closed after autogeneration",e);
			}
		}
		LOG.info("customer id autogenerated");
		return custid.toString();
	}

	public List<String> emailValidation(final CustomerRegVO cvo) throws CustomerException {

		dbConnection = ConnectionManager.getConnection();
		final String emailid = SQLUtill.getSqlProperty(SQLConstants.eMAIl);
		System.out.println(emailid);
		try {
			System.out.println("came into try");
			statement = dbConnection.createStatement();
			rset = statement.executeQuery(emailid);
			while (rset.next()) {
				System.out.println("rset.next"+rset.getString("EMAIl_ID"));
				emailList.add(rset.getString("EMAIl_ID"));
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			throw new CustomerException("Connection not established during emailvalidation",e);
		} finally {
			try {
				dbConnection.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				throw new CustomerException("Connection not closed after emailvalidation",e);
			}
		}
		LOG.info("email list fectched from database");
		return emailList;
	}

	public String loginType(final LoginVO loginVO) throws CustomerException {
		String ltype = "";
		String firstname="";
		String customerID="";
		final String sql2 = SQLUtill.getSqlProperty(SQLConstants.logintype);
		final String sql3=SQLUtill.getSqlProperty(SQLConstants.firstname);
		
		dbConnection = ConnectionManager.getConnection();
		try {
			preparedStatement = dbConnection.prepareStatement(sql2);
			preparedStatement.setString(1, loginVO.getEmailId());
			preparedStatement.setString(2, loginVO.getPassword());
			rset = preparedStatement.executeQuery();
			if (rset.next()) {
				ltype = rset.getString(1);
				System.out.println("came into if");
			} else {
				ltype = "F";
			}
			preparedStatement=dbConnection.prepareStatement(sql3);
			preparedStatement.setString(1,loginVO.getEmailId());
			rset=preparedStatement.executeQuery();
			while(rset.next())
			{
				firstname=rset.getString(1);
				System.out.println("firstname--"+firstname);
			}
			preparedStatement=dbConnection.prepareStatement(SQLUtill.getSqlProperty(SQLConstants.custId));
			preparedStatement.setString(1,loginVO.getEmailId());
			rset=preparedStatement.executeQuery();
			while(rset.next())
			{
				
				customerID=rset.getString(1);
				System.out.println(customerID+"---");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			throw new CustomerException("Connection not established during checking logintype",e);
		} finally {
			try {
				dbConnection.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				throw new CustomerException("Connection not closed after checking logintype",e);
			}
		}
		LOG.info("logintype fetched from database");
		System.out.println(ltype+" "+firstname);
		return ltype+" "+firstname+" "+customerID;
	}
	
}
